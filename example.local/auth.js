document.addEventListener('DOMContentLoaded', () => {
    // –¢–∞–±—ã
    const loginTab = document.getElementById('loginTab');
    const registerTab = document.getElementById('registerTab');
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const toRegister = document.getElementById('toRegister');
    const toLogin = document.getElementById('toLogin');

    function showLogin() {
        loginTab.classList.add('active');
        registerTab.classList.remove('active');
        loginForm.style.display = '';
        registerForm.style.display = 'none';
        bearNod();
    }
    function showRegister() {
        loginTab.classList.remove('active');
        registerTab.classList.add('active');
        loginForm.style.display = 'none';
        registerForm.style.display = '';
        bearNod();
    }
    loginTab.addEventListener('click', showLogin);
    registerTab.addEventListener('click', showRegister);
    toRegister.addEventListener('click', (e) => { e.preventDefault(); showRegister(); });
    toLogin.addEventListener('click', (e) => { e.preventDefault(); showLogin(); });

    // --- –ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ ---
    const pawLeft = document.getElementById('bear-paw-left');
    const pawRight = document.getElementById('bear-paw-right');
    const pupilLeft = document.getElementById('bear-pupil-left');
    const pupilRight = document.getElementById('bear-pupil-right');
    const eyelidLeft = document.getElementById('bear-eyelid-left');
    const eyelidRight = document.getElementById('bear-eyelid-right');
    const bearFace = document.getElementById('bear-face');
    let isPeeking = false;
    let blinkTimeout = null;

    // –ú–æ—Ä–≥–∞–Ω–∏–µ
    function blink() {
        if (!eyelidLeft || !eyelidRight) return;
        eyelidLeft.setAttribute('style', 'transition: opacity 0.18s; opacity:1;');
        eyelidRight.setAttribute('style', 'transition: opacity 0.18s; opacity:1;');
        setTimeout(() => {
            eyelidLeft.setAttribute('style', 'transition: opacity 0.18s; opacity:0;');
            eyelidRight.setAttribute('style', 'transition: opacity 0.18s; opacity:0;');
        }, 180);
        scheduleBlink();
    }
    function scheduleBlink() {
        clearTimeout(blinkTimeout);
        blinkTimeout = setTimeout(blink, 2000 + Math.random() * 2000);
    }
    scheduleBlink();

    // –ü–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ–≤—ã
    function bearNod() {
        if (!bearFace) return;
        bearFace.setAttribute('style', 'transition: transform 0.3s; transform: rotate(-8deg) scale(1.04);');
        setTimeout(() => {
            bearFace.setAttribute('style', 'transition: transform 0.3s; transform: rotate(0deg) scale(1);');
        }, 300);
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ª–∞–ø–æ–∫
    function pawsNormal() {
        if (!pawLeft || !pawRight) return;
        pawLeft.setAttribute('transform', '');
        pawRight.setAttribute('transform', '');
    }
    function pawsPeek() {
        pawLeft.setAttribute('transform', 'translate(12,-28) rotate(-10 57 145)');
        pawRight.setAttribute('transform', 'translate(-12,-28) rotate(10 123 145)');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –ø–æ–ª–µ–π –ø–∞—Ä–æ–ª—è)
    function shouldPeek() {
        const loginPass = document.getElementById('login-password');
        const regPass = document.getElementById('register-password');
        const regPass2 = document.getElementById('register-password2');
        // –ï—Å–ª–∏ loginForm –≤–∏–¥–∏–º –∏ –ø–∞—Ä–æ–ª—å –æ—Ç–∫—Ä—ã—Ç
        if (loginForm.style.display !== 'none' && loginPass && loginPass.type === 'text') return true;
        // –ï—Å–ª–∏ registerForm –≤–∏–¥–∏–º –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π –ø–∞—Ä–æ–ª—è –æ—Ç–∫—Ä—ã—Ç–æ
        if (registerForm.style.display !== 'none' && (
            (regPass && regPass.type === 'text') || (regPass2 && regPass2.type === 'text')
        )) return true;
        return false;
    }

    // –ó—Ä–∞—á–∫–∏ —Å–ª–µ–¥—è—Ç –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º –∏–ª–∏ —Å–º–æ—Ç—Ä—è—Ç –≤–Ω–∏–∑
    function movePupils(e) {
        if (!pupilLeft || !pupilRight) return;
        if (isPeeking) {
            // –°–º–æ—Ç—Ä–∏–º –≤–Ω–∏–∑ (–Ω–∞ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è)
            pupilLeft.setAttribute('cx', 67.5 + 0);
            pupilLeft.setAttribute('cy', 112);
            pupilRight.setAttribute('cx', 112.5 + 0);
            pupilRight.setAttribute('cy', 112);
            return;
        }
        const svg = document.getElementById('bear-svg');
        const rect = svg.getBoundingClientRect();
        // –¶–µ–Ω—Ç—Ä—ã –≥–ª–∞–∑
        const left = {x: rect.left + 67.5 * rect.width/180, y: rect.top + 106.5 * rect.height/160};
        const right = {x: rect.left + 112.5 * rect.width/180, y: rect.top + 106.5 * rect.height/160};
        // –ö—É—Ä—Å–æ—Ä
        const mx = e.clientX, my = e.clientY;
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–º–µ—â–µ–Ω–∏—è
        function calc(dx, dy, max) {
            const dist = Math.sqrt(dx*dx + dy*dy);
            if (dist > max) {
                dx = dx * max / dist;
                dy = dy * max / dist;
            }
            return {dx, dy};
        }
        // –õ–µ–≤—ã–π –≥–ª–∞–∑
        let v1 = calc(mx - left.x, my - left.y, 7);
        pupilLeft.setAttribute('cx', 67.5 + v1.dx);
        pupilLeft.setAttribute('cy', 106.5 + v1.dy);
        // –ü—Ä–∞–≤—ã–π –≥–ª–∞–∑
        let v2 = calc(mx - right.x, my - right.y, 7);
        pupilRight.setAttribute('cx', 112.5 + v2.dx);
        pupilRight.setAttribute('cy', 106.5 + v2.dy);
    }
    window.addEventListener('mousemove', movePupils);

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å + –ª–∞–ø–∫–∏/–≥–ª–∞–∑–∞
    document.querySelectorAll('.toggle-password').forEach(btn => {
        btn.addEventListener('click', function() {
            const input = this.previousElementSibling;
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É –ø–æ–ª—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞
            const isMainPassword = input.id === 'login-password' || input.id === 'register-password';
            const isHidden = input.type === 'password';
            if (isHidden) {
                input.type = 'text';
                this.textContent = 'üôà';
            } else {
                input.type = 'password';
                this.textContent = 'üëÅ';
            }
            // –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
            if (shouldPeek()) {
                pawsPeek();
                isPeeking = true;
                movePupils({clientX: 0, clientY: 9999}); // —Å—Ä–∞–∑—É —Å–º–æ—Ç—Ä–∏—Ç –≤–Ω–∏–∑
            } else {
                pawsNormal();
                isPeeking = false;
                movePupils({clientX: window.innerWidth/2, clientY: window.innerHeight/2});
            }
        });
    });
    // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∞–ø–∫–∏ –≤–Ω–∏–∑—É, –≥–ª–∞–∑–∞ —Å–ª–µ–¥—è—Ç –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º
    pawsNormal();
    isPeeking = false;
    movePupils({clientX: window.innerWidth/2, clientY: window.innerHeight/2});

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registerForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const pass1 = document.getElementById('register-password');
        const pass2 = document.getElementById('register-password2');
        const name = document.getElementById('register-name');
        const email = document.getElementById('register-email');

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        const errorMessages = document.querySelectorAll('.error-message');
        errorMessages.forEach(msg => msg.remove());

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
        if (pass1.value.length < 6) {
            showError(pass1, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }

        if (pass1.value !== pass2.value) {
            showError(pass2, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            return;
        }

        if (!email.value.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
            showError(email, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
            return;
        }

        try {
            const response = await fetch('/register_process.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: name.value.trim(),
                    email: email.value.trim(),
                    password: pass1.value
                })
            });

            const data = await response.json();
            
            if (data.success) {
                alert(data.message);
                showLogin(); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª–µ–º
                if (data.message.includes('email')) {
                    showError(email, data.message);
                } else if (data.message.includes('–ø–∞—Ä–æ–ª—å')) {
                    showError(pass1, data.message);
                } else {
                    alert(data.message);
                }
                
                // –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
                if (data.debug) {
                    console.error('Debug info:', data.debug);
                }
            }
        } catch (error) {
            console.error('Error:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    function showError(input, message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.style.color = 'red';
        errorDiv.style.fontSize = '0.9rem';
        errorDiv.style.marginTop = '5px';
        errorDiv.textContent = message;
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
        const existingError = input.parentElement.querySelector('.error-message');
        if (existingError) {
            existingError.remove();
        }
        
        input.parentElement.appendChild(errorDiv);
        input.style.borderColor = 'red';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        input.addEventListener('input', function() {
            this.style.borderColor = '';
            const error = this.parentElement.querySelector('.error-message');
            if (error) error.remove();
        }, { once: true });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
    loginForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        const email = document.getElementById('login-email');
        const password = document.getElementById('login-password');

        try {
            const response = await fetch('login_process.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'same-origin',
                body: JSON.stringify({
                    email: email.value,
                    password: password.value
                })
            });

            const data = await response.json();
            
            if (data.success) {
                alert(data.message);
                window.location.href = 'index.html';
            } else {
                alert(data.message);
            }
        } catch (error) {
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            console.error('Error:', error);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
    async function handleLogout(e) {
        e.preventDefault();
        try {
            const response = await fetch('logout.php', {
                credentials: 'same-origin'
            });
            const data = await response.json();
            
            if (data.success) {
                window.location.reload();
            }
        } catch (error) {
            console.error('Error during logout:', error);
        }
    }
}); 